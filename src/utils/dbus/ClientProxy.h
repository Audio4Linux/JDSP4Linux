/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp manifest.xml --adaptor ServerAdaptor --proxy ClientProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CLIENTPROXY_H
#define CLIENTPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface me.timschneeberger.jdsp4linux.Gui
 */
class MeTimschneebergerJdsp4linuxGuiInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "me.timschneeberger.jdsp4linux.Gui"; }

public:
    MeTimschneebergerJdsp4linuxGuiInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MeTimschneebergerJdsp4linuxGuiInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> raiseWindow()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("raiseWindow"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface me.timschneeberger.jdsp4linux.Service
 */
class MeTimschneebergerJdsp4linuxServiceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "me.timschneeberger.jdsp4linux.Service"; }

public:
    MeTimschneebergerJdsp4linuxServiceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MeTimschneebergerJdsp4linuxServiceInterface();

    Q_PROPERTY(QString AppFlavor READ appFlavor)
    inline QString appFlavor() const
    { return qvariant_cast< QString >(property("AppFlavor")); }

    Q_PROPERTY(QString AppVersion READ appVersion)
    inline QString appVersion() const
    { return qvariant_cast< QString >(property("AppVersion")); }

    Q_PROPERTY(QString AudioFormat READ audioFormat)
    inline QString audioFormat() const
    { return qvariant_cast< QString >(property("AudioFormat")); }

    Q_PROPERTY(QString CoreVersion READ coreVersion)
    inline QString coreVersion() const
    { return qvariant_cast< QString >(property("CoreVersion")); }

    Q_PROPERTY(bool IsProcessing READ isProcessing)
    inline bool isProcessing() const
    { return qvariant_cast< bool >(property("IsProcessing")); }

    Q_PROPERTY(QString SamplingRate READ samplingRate)
    inline QString samplingRate() const
    { return qvariant_cast< QString >(property("SamplingRate")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> commit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("commit"), argumentList);
    }

    inline QDBusPendingReply<> deletePreset(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("deletePreset"), argumentList);
    }

    inline QDBusPendingReply<QString> get(const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("get"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getKeys()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getKeys"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getPresets()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getPresets"), argumentList);
    }

    inline QDBusPendingReply<> loadPreset(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("loadPreset"), argumentList);
    }

    inline QDBusPendingReply<> savePreset(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("savePreset"), argumentList);
    }

    inline QDBusPendingReply<> set(const QString &key, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("set"), argumentList);
    }

    inline QDBusPendingReply<> setAndCommit(const QString &key, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("setAndCommit"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace me {
  namespace timschneeberger {
    namespace jdsp4linux {
      typedef ::MeTimschneebergerJdsp4linuxGuiInterface Gui;
      typedef ::MeTimschneebergerJdsp4linuxServiceInterface Service;
    }
  }
}
#endif
